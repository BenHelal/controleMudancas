{% extends 'base.html.twig' %}

{% block body %}
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
  <style>

    #item-listss {
      list-style-type: none;
      padding: 0;
      margin: 20px;
      border: 1px solid #ccc;
    }

    .draggabledsss {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px;
      margin: 5px;
      background-color: #f4f4f4;
      cursor: grab;
    }

  </style>


<div class="container mt-3">
    <button class="btn btn-success" style="background-color : #17a2b8" onclick="voltar()">Voltar</button>
</div>

  <ul id="item-listss">
{% set sortedItems = m|sort((a, b) =>
    a.orderNumber is not null and b.orderNumber is not null
    ? a.orderNumber <=> b.orderNumber
    : a.orderNumber is not null
        ? -1
        : b.orderNumber is not null
            ? 1
            : 0
) %}

{% for item in sortedItems %}
        {% if item.implemented == null %}
        
        <li  class="draggabledsss" data-id="{{ item.id }}"
            <span>Codigo da mudança: {{ item.id }} <br>
                Nome da mudança: {{ item.nomeMudanca }}<br>
            </span>
            {% if item.areaResp.manager != person %}
                 {% if item.orderNumber != null and item.muds.iniciar != null %}
                        {{ item.orderNumber }}
               
                    {% elseif item.orderNumber == null and item.muds.iniciar != null %} {{ m|length -1  }} 
                    {% else %}N.A 
                    {% endif %}
                 <br>
            {% else %}
            <select class="order-selectss" onchange="changeOrder(this, {{ item.id }})">
                {% for i in 1..m|length %}
                    {% if item.orderNumber != null and item.muds.iniciar != null %}                       
                        <option  
                                value="{{ i }}"  
                            {% if i == item.orderNumber %} 
                                 selected 
                            {% endif %}
                        > 
                            {{ i  }} 
                        </option>
                    {% elseif item.orderNumber == null and item.muds.iniciar != null %}
                        <option value="{{ m|length }}"  {% if m|length == item.orderNumber %} selected{% endif %} > {{ m|length }}</option>
                    {% else %}
                        <option value="{{i}}" > {{i}}</option>
                        {% if i == m|length %}
                             <option value="0" selected >N.A</option>
                        {% endif %}
                    {% endif %}
                {% endfor %}
            </select>
            {% endif %}
        </li>
        {% endif %}
    {% endfor %}
</ul>

<script>
    const itemList = document.getElementById('item-listss');

    new Sortable(itemList, {
        animation: 150,
        handle: '.draggabledsss',
        onUpdate: function (evt) {
            updateOrder(evt.from.children);
            const orderData = getOrderData(itemList);
            updateOrderOnServer(orderData);
        }
    });

    function updateOrder(items) {
        Array.from(items).forEach((item, index) => {
            const orderSelect = item.querySelector('.order-selectss');
            if (orderSelect.value !== "N.A") {
                orderSelect.selectedIndex = index;
            }
        });
    }

function changeOrder(select, itemId) {
    const listItem = select.closest('.draggabledsss');
    const newIndex = parseInt(select.value) - 1;

    // Check if select.value is not "N.A"
    if (select.value !== "N.A") {
        itemList.insertBefore(listItem, itemList.children[newIndex]);
        updateOrder(itemList.children);
    }

    const orderData = getOrderData(itemList);

    // Find the orderData entry for the item being changed
    const changedItem = orderData.find(item => item.id === itemId);
    if (changedItem) {
        if (changedItem.value != "N.A") {
            changedItem.order = select.value;
        }
    }

    updateOrderOnServer(orderData);
}

    function getOrderData(itemList) {
        const orderData = [];
        Array.from(itemList.children).forEach(item => {
            orderData.push({
                id: item.getAttribute('data-id'),
                order: item.querySelector('.order-selectss').value
            });
        });
        return orderData;
    }

    function updateOrderOnServer(orderData) {
        // Send AJAX request to update order on the server
        const xhr = new XMLHttpRequest();
        xhr.open('POST', "{{ path('updateorder') }}", true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    console.log('Order updated on the server');
                } else {
                    console.error('Error updating order on the server');
                }
            }
        };

        xhr.send('orderData=' + encodeURIComponent(JSON.stringify(orderData)));
    }
</script>

<script>
    function voltar() {
        window.history.back();
    }
</script>

{% endblock %}